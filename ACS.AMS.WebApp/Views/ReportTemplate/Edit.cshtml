@using ACS.AMS.DAL
@model ReportTemplateTable
@using (Html.AjaxBeginForm(DisplayHelper.GetAjaxOptions()))
    {
   

    @Html.HiddenFor(model => model.CurrentPageID)
    @Html.HiddenFor(model => model.ReportTemplateCategoryID)
    @Html.HiddenFor(model => model.ReportTemplateID)
    @Html.HiddenFor(model => model.QueryString)
      @Html.HiddenFor(model => model.ReportTemplateFile)
    @Html.HiddenFor(model => model.ProcedureName)
    @Html.HiddenFor(model => model.QueryType)
    @Html.HiddenFor(model => model.ObjectID)
    @Html.HiddenFor(model => model.StatusID)
    
    <div class="list-container">
        <div class="row k-text-error">
            @* @Html.ValidationSummary()*@
            @Html.ValidationMessage("12")
            <div id="errorCommon">
                <span style="color:red;font-weight:bold;">note:If QueryObject is procedure then it must return table values </span>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-4">
                @Html.Label("QueryObject")
                @Html.TextBox("ReportTemplateName", Model.QueryString, new { disabled = "disabled", Class = "form-control" })
                @Html.ValidationMessageFor(model => model.QueryString, " ")
                <div id="errProcedureName"></div>
            </div>
            <div class="col-xl-4">
                @Html.LabelFor(model => model.ReportTemplateCategoryID)
                @{
                    AMSContext db = AMSContext.CreateNewContext();
                    var reportTemplateCategoryName = ReportTemplateCategoryTable.GetItem(db, Model.ReportTemplateCategoryID).ReportTemplateCategoryName;
                    }
                @(Html.TextBox("ReportTemplateName", reportTemplateCategoryName,
                                   new { disabled = "disabled", Class = "form-control" })
                )

                @Html.ValidationMessageFor(model => model.ReportTemplateCategoryID, " ")
            </div>
            <div class="col-xl-4">
                @Html.Label("ReportTemplateName")

                @Html.TextBoxFor(model => model.ReportTemplateName, new { Class = "form-control" })
                @Html.ValidationMessageFor(model => model.ReportTemplateName, " ")
                <div id="errReportTemplateName"></div>
            </div>
            <div class="col-xl-4">
                @Html.Label("Description")
                @Html.TextAreaFor(model => model.TemplateDescription, 3, 40, new { Class = "form-control" })
                @Html.ValidationMessageFor(model => model.TemplateDescription, " ")

            </div>
            <div class="col-xl-4">
              @*  @Html.Label("Report Template File")

                @(Html.Kendo().DropDownListFor(model => model.ReportTemplateFile).BindTo(ComboBoxHelper.GetAllReportTemplateFile(1))
                .HtmlAttributes(new { style="width:100%"})
                )
                @Html.ValidationMessageFor(model => model.ReportTemplateFile, " ")*@
            </div>
           
            <div class="form-group col-12 col-sm-6 col-md-12">
            </div>
                <div class="col-xl-6" id="ReportFieldGrid">
                </div>
               
                <div class="col-xl-6" id="ReportFilterFieldGrid">
                </div>


            <div class="col-xl-12 text-right add-action-btns">
                @Html.Kendo().Button().ThemeColor(ThemeColor.Primary).Content("Save").Name("loginButton").HtmlAttributes(new { type="submit" })
                @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Cancel").Name("cancelButton").HtmlAttributes(new { onclick="loadIndexPage('ReportTemplate')" })
            </div>
        </div>
        <div class="form-group col-md-12">
            <label for="fullname">@Html.Label("Audit Log")</label>
            <a href="#" class="dropdown-toggle" id="AuditLogToggle" data-bs-toggle="collapse" data-bs-target="#AuditLogCollapse"
               aria-expanded="false" aria-controls="AuditLogCollapse">
                <span title='Audit Log'></span>
            </a>
        </div>
        <div class="collapse" id="AuditLogCollapse">
            @{
                EntryPageModel newModel = new EntryPageModel()
                {

                    EntityInstance = Model as BaseEntityObject,
                    ControllerName = this.GetType().Name.Substring(0, this.GetType().Name.Length - "Controller".Length),
                };
                Html.RenderPartial("BaseViews/AuditLogSingleView", newModel);
            }
        </div>
    </div>
          
}

<script language="javascript" type="text/javascript">
    function GetCurrentPageID() {
        return $("#CurrentPageID").val();
    }

    $(function () {
        setInitialFocus("@(ViewData.ContainsKey("FocusControl")?ViewData["FocusControl"]:"ReportTemplateName") ");
        setPageHeading("@Language.GetPageTitle("ReportTemplateEdit") ");
        //setActionHeading("@Language.GetPageTitle("ReportTemplateEdit") ");

        ProcedureChange();
    });

    function ReloadFilterFields() {
        var pn = 0;
        if (typeof GetFilterFieldsPageNumber === "function")
            pn = GetFilterFieldsPageNumber();

        prm = { pageNumber: pn, currentPageID: GetCurrentPageID() };

        loadContentPageToControl("@Url.Action("ReportTemplateFilterFields")?" + $.param(prm), "ReportFilterFieldGrid", false);
    }
    function ProcedureChange() {
        ReloadFilterFields();

        prm = { pageNumber: 0, currentPageID: GetCurrentPageID() };
        loadContentPageToControl("@Url.Action("ReportTemplateFields")?" + $.param(prm), "ReportFieldGrid", false);
    }

    function ReportTemplateValidation() {
        var flag = true;

        if (!$("#ReportTemplateName").val()) {
            if ($("#validateerrReportTemplateName").val() != "") {
                $("#errReportTemplateName").after('<span style="color:red;font-weight:normal;" id="validateerrReportTemplateName">@Language.GetString("ReportTemplateName is Required")</span>');
            }
            flag = false;
        }
        else {
            $("#validateerrReportTemplateName").remove();
        }

        if (flag) {
            return true;
        }
        else {
            return false;
        }
    }
                                    </script>
