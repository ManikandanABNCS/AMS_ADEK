@using ACS.AMS.DAL.DBModel
@using ACS.AMS.DAL
@using ACS.AMS.WebApp.Models
@using ACS.AMS.DAL.DBContext

@model IndexPageModel
@{
    int currentPageId = ViewBag.CurrentPageID;
    int ApprovalHistoryID = ViewBag.ApprovalHistoryID;
    string rightName = ViewBag.rightName;
    ViewBag.Title = "Details";
    int currentLvl = ViewBag.CurrentLevel;

    var res = TransactionTable.GetTransactionData(AMSContext.CreateNewContext(), ApprovalHistoryID);//TransactionTable.Getresult(AMSContext.CreateNewContext(), ApprovalHistoryID, SessionUser.Current.UserID, 1003);
    var UserName = User_LoginUserTable.GetExistingUser(AMSContext.CreateNewContext(), res.CreatedBy).UserName;
    var moduleName = string.Empty;
    if (res.TransactionTypeID == (int)ApproveModuleValue.AssetTransfer || res.TransactionTypeID == (int)ApproveModuleValue.InternalAssetTransfer)
    {
        moduleName = "AssetTransfer";
    }
    if (res.TransactionTypeID == (int)ApproveModuleValue.AssetRetirement)
    {
        moduleName = "AssetRetirement";
    }
    if (res.TransactionTypeID == (int)ApproveModuleValue.AssetAddition)
    {
        moduleName = "AssetAddition";
    }
    if (res.TransactionTypeID == (int)ApproveModuleValue.AssetMaintenanceRequest)
    {
        moduleName = "AssetMaintenanceRequest";
    }
    if (res.TransactionTypeID == (int)ApproveModuleValue.AMCSchedule)
    {
        moduleName = "AMCSchedule";
    }
    var inidoc = DocumentTable.GetDocumentDetails(AMSContext.CreateNewContext(), res.TransactionID,moduleName);
    var approvalDoc = DocumentTable.GetDocumentDetails(AMSContext.CreateNewContext(), ApprovalHistoryID, string.Concat(moduleName, "Approval"));
}

<script>
    function multiapprovalDoc(val) {
        var flag = true;
        if (val == 'Reject') {
            if ($("#CurrentLevel").val() > 1) {
                $("#levelSelection").show();
                if (document.getElementById("Levels") != null) {
                    if (!$("#Levels").val()) {
                        if ($("#validatelevelError").val() != "") {
                            flag = false;
                            $("#levelError").after('<span style="color:red;font-weight:normal;" id="validatelevelError">@Language.GetString("Request for ReApproval Role Name is Required")</span>');
                            return false;                        }
                    }
                    else {
                        $("#validatelevelError").remove();
                    }
                }
            }

            if ($('#Remarks').val() == '') {
                flag = false;
                alert('Please Enter Remarks');
                return false;
            }
        }
        var levels = 0;
        if (val == 'Reject') {
            if ($("#Levels").val()) {
                levels = $("#Levels").val();
            }
        }
        if (flag) {
            $.ajax({
                url: "/TransactionApproval/ApprovalProcess",
                type: "POST",
                dataType: "json",
                async: false,
                data: {
                    type: val,
                    id: $("#TransactionID").val(),
                    remarks: document.getElementById("Remarks").value,
                    currentPageID: @Model.EntityInstance.CurrentPageID,
                    moduleID: $("#moduleID").val(),
                    userID: $("#UserID").val(),
                    enableUpdate: 0,
                    levels: levels,
                },
                success: function (data) {
                    if (data.Result == "Success") {
                        showSuccessMessage(data.message);
                        $('#remarks').val('');
                        loadDynamicIndexPage('TransactionApproval', '@ViewBag.rightName');

                    }
                    else {
                        ShowErrorMesage(data.message);
                        loadDynamicIndexPage('TransactionApproval', '@ViewBag.rightName');
                    }
                }
            });
        }
        else {
            return false;
        }
    }
</script>

@using (Html.AjaxBeginForm(DisplayHelper.GetAjaxOptions()))
    {
    <div class="list-container">
        <div class="row k-text-error">
            @* @Html.ValidationSummary()*@
            @Html.ValidationMessage("12")
        </div>

        <div class="row">
            <div class="col-xl-4">
                @Html.Hidden("TransactionID", ApprovalHistoryID)
                @Html.Hidden("CurrentPageID", currentPageId)
                @Html.Hidden("UserID", SessionUser.Current.UserID)
                @Html.Hidden("CurrentLevel", currentLvl)
                @Html.Hidden("moduleID", res.TransactionTypeID)
                <label for="fullname">@Html.FieldLabel("TransactionNo", false)</label>
                @(Html.TextBox("TransactionNo", res.TransactionNo, new { Class = "form-control", disabled = "disabled" }))
            </div>
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("CreatedBy", false)</label>
                @(Html.TextBox("CreatedBy", UserName, new { Class = "form-control", disabled = "disabled" }))
            </div>
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("CreatedDateTime", false)</label>
                @(Html.TextBox("CreatedDateTime", res.CreatedDateTime.ToString("dd/MM/yyyy hh:mm:ss"), new { Class = "form-control", disabled = "disabled" }))
            </div>
            
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("Initiator Document Name", false)</label>
                @{
                    int i = 0;
                    foreach (var doc in inidoc)
                    {
                        string ids = "filePath" + i + "";
                        string[] arryDocID = doc.FilePath.Split("FileStoragePath");
                                                                                    @Html.ActionLink(doc.DocumentName, "DownloadFile", new { fileName = arryDocID[1] })
                                                                                   <br />
                        i = i + 1;
                    }
                  
                }
              
            </div>
            
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("Approval Document Name", false)</label>
                @{
                    int j = 0;
                    foreach (var doc in approvalDoc)
                    {
                        string ids = "filePath" + j + "";
                        string[] arryDocID = doc.FilePath.Split("FileStoragePath");
                                                                                    @Html.ActionLink(doc.DocumentName, "DownloadFile", new { fileName = arryDocID[1] })
                                                                                    <br />
                        j = j + 1;
                    }
                    }
                
            </div>
            
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("Document Upload", false)</label>
                @(
                    Html.Kendo().Upload()
                    .Name("UploadDoc")
                    .Async(a => a
                    .Save("DocumentUpload", "TransactionApproval", new { currentPageID = Model.EntityInstance.CurrentPageID, id = ViewBag.ApprovalHistoryID, userID = SessionUser.Current.UserID })
                    .Remove("DocumentRemove", "TransactionApproval", new { currentPageID = Model.EntityInstance.CurrentPageID, id = ViewBag.ApprovalHistoryID, userID = SessionUser.Current.UserID })
                    .AutoUpload(true)
                    ).Multiple(true)
                    //.Events(events => events
                   // .Success("OnSuccessUpload").Complete("OnComplete")
                   
                    .Validation(validation => validation
                    .AllowedExtensions(".txt", ".doc", ".docx", ".pdf", ".xls", ".xlsx")
                    
                    )
                    )
            </div>
            
        </div>


        <div class="row" style="padding-top:10px">
            <div class="col-xl-12">
                @{
                    DisplayHelper display = new DisplayHelper(this, "TransactionApproval", "TransactionID");

                    var gridCtrl = Html.Kendo().Grid<dynamic>()
                    .Name("DetailsGrid");
                    display.AddGridActionColumns(gridCtrl, Url, "TransactionLineItem", rightName, addEditColumn: false, addDetailsColumn: false, addDeleteColumn: false, addCheckbox: false, deleteActionName: "_deleteItem", deleteAdditionalData: "CurrentPageID=" + Model.EntityInstance.CurrentPageID);
                    display.ConfigureGrid(gridCtrl, readDataHandler: "defaultGridReadWithParamMethod", readActionName: "_LineItemindex");
                    display.AddGridHeaders(gridCtrl, Url, this.Html, rightName, addNewButtonRequired: false, exportToCSVButtonRequired: false, exportToExcelButtonRequired: false, exportToPDFButtonRequired: false, addDeleteButtonRequired: false,ChangeColumnRequired:false);

                    gridCtrl.Render();
                }
              
            </div>
         
        </div>

        <div class="row" style="padding-top:10px">
        <div class="col-xl-6">
            <label class="fieldlabel"> Remarks :</label>
            @Html.TextArea("Remarks", "", 5, 50, new { @class = "k-textbox form-control", style = "width: 594px !important;height:90px; resize:none;", maxlength = 180 })
        </div>
    </div>
        <div class="row" style="padding-top:10px">
            <div class="col-xl-12">
                <label class="fieldlabel"> Approval History Details :</label>

                @{
                    DisplayHelper displayApproval = new DisplayHelper(this, "TransactionApproval", "ApprovalHistoryID");

                    var gridCtrlHistory = Html.Kendo().Grid<dynamic>()
                    .Name("DetailsGridApproval");
                    displayApproval.AddGridActionColumns(gridCtrlHistory, Url, "ApprovalHistory", rightName, addEditColumn: false, addDetailsColumn: false, addDeleteColumn: false, addCheckbox: false, deleteActionName: "_deleteItem", deleteAdditionalData: "CurrentPageID=" + Model.EntityInstance.CurrentPageID);
                    displayApproval.ConfigureGrid(gridCtrlHistory, readDataHandler: "defaultGridReadWithParamMethod", readActionName: "_LineItemApproval");
                    //displayApproval.AddGridHeaders(gridCtrlHistory, Url, this.Html, rightName, addNewButtonRequired: false, exportToCSVButtonRequired: false, exportToExcelButtonRequired: false, exportToPDFButtonRequired: false, addDeleteButtonRequired: false);

                    gridCtrlHistory.Render();
                }

            
            </div>
        </div>
          <div class="row" style="padding-top:10px;display:none;" id="levelSelection">
            <div class="col-xl-4">
                <label for="fullname">@Html.FieldLabel("Request for Reapproval RoleName", false)</label>
                @(Html.Kendo().DropDownList().Name("Levels")
                    //.Name("ApproveModuleID")
                    .HtmlAttributes(new { style = "width:200px!important " })
                    .BindTo(ComboBoxHelper.GetTransactionAssignLevels(AMSContext.CreateNewContext(), ApprovalHistoryID, ""))
                    .OptionLabel("Select Level")
                    
                    )
                    <div id="levelError"></div>
            </div>
              </div>
        <div class="col-xl-12 text-right add-action-btns" style="padding-top: 10px;">
            @Html.Kendo().Button().ThemeColor(ThemeColor.Primary).Content("Approve").Name("Approve").HtmlAttributes(new { @class = "saveButton",style = "width: 170px;", onclick = "return multiapprovalDoc('Approval')" })
            @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Reject").Name("Reject").HtmlAttributes(new { @class = "cancelButton", style = "width: 170px;", onclick = "return multiapprovalDoc('Reject')" })
            @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Cancel").Name("cancelButton").HtmlAttributes(new { @class = "saveButton", onclick = $"loadDynamicIndexPage('TransactionApproval', '{ViewBag.rightName}')" })
        </div>

    </div>

}

<script language="javascript" type="text/javascript">
    $(function () {
        setPageHeading('Edit @Language.GetPageTitle(ViewBag.rightName)');
       
    });
  
    function tagsTemplate(item, path) {

        var template = "<ul>";
        if (item != null) {
            var feedUpdateSplit = item.split(";");
            if (item != null) {
                if (feedUpdateSplit.length > 0) {
                    for (var i = 0; i < feedUpdateSplit.length; i++) {

                        template += kendo.format("<li><a class='gridHyperLine' style='width:250px;' href='javascript:DownloadHistoryDocument(\"{0}\",{1})'  title='\{0}\#'>{0}</a></li>", feedUpdateSplit[i], path);
                    }
                }
            }
        }
        template += "</ul>";
        return template;
    }
    function DownloadHistoryDocument(filename, id) {
        debugger;
        $.ajax({
            url: "/TransactionApproval/DownloadApprovalFile",
            type: "Get",
            dataType: "json",
            async: false,
            data: { fileName: filename, id: id },
            success: function (data) {
                if (data.Result == "Success") {
                    var folder = "TransactionDocument";
                    if (data.type == "AssetTransferApproval") {
                        folder = "TransactionDocument";
                    }
                    else if (data.type == "AssetRetirementApproval") {
                        folder = "TransactionDocument";
                    }
                    var url = "/FileStoragePath/" + folder + "/" + data.fileName;
                    // alert(url);
                    window.open(url);
                }
            }
        });
    }
    function tagsName(username) {
        var template = "";//"<ul>";
        if (username != null) {
            var feedUpdateSplit = username;//.split(",");
            if (username != null) {
                if (feedUpdateSplit.length > 0) {
                    for (var i = 0; i < feedUpdateSplit.length; i++) {

                        template += kendo.format("<a class='gridHyperLines' style='width:250px;'   title='\{0}\#'>{0}</a>", feedUpdateSplit[i]);
                    }
                }
            }
        }
        //  template += "</ul>";
        return template;
    }
</script>

<script src="/js/jquery.validate.min.js"></script>
<script src="/js/jquery.validate.unobtrusive.min.js"></script>