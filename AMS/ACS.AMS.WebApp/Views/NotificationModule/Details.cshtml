@using ACS.AMS.DAL
@model NotificationModuleTable
@{
  
    string PageName = ViewBag.PageName;
}
<script>
 
</script>

    @using (Html.AjaxBeginForm("Details", "NotificationModule", DisplayHelper.GetAjaxOptions()))
    {
    <div class="content-page-header">
        <div class="row">
            <div class="col-md-3">
                <div class="page-title">
                    <h5 id="pageMainHeadingPortion"></h5>
                </div>
            </div>
            <div class="col-md-9">
            </div>
        </div>
    </div>
@Html.HiddenFor(model => model.CurrentPageID) 
@Html.HiddenFor(model => model.NotificationModuleID) 
@Html.HiddenFor(model => model.QueryString) 
@Html.HiddenFor(model => model.QueryType)
    <div class="list-container">
        <div class="row">
            <div class="validationMessage">
            </div>

            <div class="col-xl-4">
                @Html.Label("NotificationModule")

                @Html.TextBoxFor(model => model.NotificationModule,new {disabled="disabled", Class="form-control" })
                @Html.ValidationMessageFor(model => model.NotificationModule, " ")
                <div id="errReportTemplateName"></div>
            </div>
            <div class="col-xl-4">
                    @Html.Label("QueryObject") 

                    @Html.TextBox("ReportTemplateName", Model.QueryString, new {disabled="disabled", Class="form-control" }) 
                    @Html.ValidationMessageFor(model => model.QueryString, " ") 
                    <div id="errProcedureName"></div>
            </div>
            <div class="col-xl-4">
                @Html.Label("ReportTemplate")
                @if (Model.ReportTemplateID.HasValue)
                {
                    var name = ReportTemplateTable.GetItem(AMSContext.CreateNewContext(), (int)Model.ReportTemplateID);
                    @Html.HiddenFor(model=>model.ReportTemplateID)
                    @Html.TextBox("ReportTemplateName", name.ReportTemplateName, new { disabled = "disabled", Class = "form-control" })

                }
             
                <div id="errProcedureName"></div>
            </div>
          

            <div class="form-group col-12 col-sm-6 col-md-12">
            </div>
            <div class="col-xl-6" id="NotificationFieldGrid">
            </div>

            <div class="col-xl-12 text-right add-action-btns" style="padding-top: 10px;">
               
                @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Cancel").Name("cancelButton").HtmlAttributes(new { onclick=$"LoadIndexPage('NotificationModule','{PageName}')" })
            </div>


            
        </div>
        <div class="form-group col-md-12">
            <label for="fullname">@Html.Label("Audit Log")</label>
            <a href="#" class="dropdown-toggle" id="AuditLogToggle" data-bs-toggle="collapse" data-bs-target="#AuditLogCollapse"
               aria-expanded="false" aria-controls="AuditLogCollapse">
                <span title='Audit Log'></span>
            </a>
        </div>
        <div class="collapse" id="AuditLogCollapse">
            @{
                EntryPageModel newModel = new EntryPageModel()
                {

                    EntityInstance = Model as BaseEntityObject,
                    ControllerName = this.GetType().Name.Substring(0, this.GetType().Name.Length - "Controller".Length),
                };
                Html.RenderPartial("BaseViews/AuditLogSingleView", newModel);
            }
        </div>
</div>
}
<script language="javascript" type="text/javascript">
    function GetCurrentPageID() {
        return $("#CurrentPageID").val();
    }
    $(function () {
        
        setPageHeading("Notification Module Details");
        ProcedureChange();
    });
    function ProcedureChange() {
        
        prm = { pageNumber: 0, currentPageID: GetCurrentPageID(), detailsPage: true };

        loadContentPageToControl("@Url.Action("NotificationModuleFields")?" + $.param(prm), "NotificationFieldGrid", false);
    }

</script>
