@model DashboardMappingTable
@{
    ViewBag.Title = "Create";
}
<style>
    .box-col {
        float: left;
        padding: 0 3em 1.667em 0;
    }
</style>
<script>
function OnSuccessUpload(e) {
    var fileName = e.response.ImageName;
    var name = e.response.fileName;
        if (document.getElementById('IconPath') || $('#IconPath').length > 0) {
            $("#IconPath").val(fileName);
    }
     // var ImgPath = $('#StampImage').attr('src');
     //    ImgPath = ImgPath.substring(0, ImgPath.lastIndexOf('/') + 1);
     //    if (name != "" && name != null && name != undefined) {
     //        $('#StampImage').attr('src', ImgPath + name);
     //        document.getElementById('StampImage').style.display = 'block';
     //    }
     //    else {
     //        document.getElementById('StampImage').style.display = 'none';
     //    }
}
    function filterAppID() {
        return {
            templateID: $("#DashboardTemplateID").data("kendoMultiColumnComboBox").value(),
            text: $("#FieldName").val()
        };
    }
    function filterXaxisAppID() {
        return {
            templateID: $("#DashboardTemplateID").data("kendoMultiColumnComboBox").value(),
            text: $("#XAxisField").val()
        };
    }
    function filterYaxisAppID() {
        return {
            templateID: $("#DashboardTemplateID").data("kendoMultiColumnComboBox").value(),
            text: $("#YAxisField").val()
        };
    }
    function filterCategoriesAppID() { 
        return {
            templateID: $("#DashboardTemplateID").data("kendoMultiColumnComboBox").value(),
            text: $("#CategoriesField").val()
        };
    }
</script>
@using (Html.AjaxBeginForm(DisplayHelper.GetAjaxOptions()))
{

    <div class="list-container">
        <div class="row k-text-error">
            @* @Html.ValidationSummary()*@
            @Html.ValidationMessage("12")
        </div>
        @Html.HiddenFor(model => model.CurrentPageID)
        <div class="row">
            <div class="row">
                <div class="col-xl-3">
                    @Html.Label(Language.GetString("DashboardType")) <span style='color: red'>* </span>
                    @(Html.Kendo().DropDownListFor(Model => Model.DashboardTypeID)
                    .OptionLabel("Select Dashboard Type")
                        .HtmlAttributes(new { style = "width:100% !important" })
                        .Events(eve => eve.Change("ChangeDashboardType"))
                        .BindTo(ComboBoxHelper.GetAllDashboardType())
                        )
                        <div id="errDashboardTypeID"></div>
                </div>
                <div class="col-xl-3">
                    @Html.Label(Language.GetString("Dashboard Template")) <span style='color: red'>* </span>
                    @(Html.Kendo().MultiColumnComboBoxFor(model => model.DashboardTemplateID)
                        .DataTextField("DashboardTemplateName")
                        .DataValueField("DashboardTemplateID")
                        .Columns(columns =>
                        {
                            columns.Add().Field("DashboardTemplateName").Title("DashboardTemplateName").Width("300px");
                            columns.Add().Field("ProcedureName").Title("ProcedureName").Width("300px");

                        })
                        .AutoBind(false)
                        .Filter(FilterType.Contains).Events(eve => eve.Change("ChangeDashboardName"))
                        .HtmlAttributes(new { Style = "Width:100%" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetAllDashboardTemplate", "DataService");
                            }).ServerFiltering(true);
                        })

                        )
                    <div id="errDashboardTemplateID"></div>
                </div>
                <div class="col-xl-3">
                    @Html.FieldLabelFor(model => model.DasboardMappingName, true)
                    @Html.TextBoxFor(model => model.DasboardMappingName, new { Class = "form-control" })
                    <div id="errDasboardMappingName"></div>
                </div>


                <div class="col-xl-3">
                    @Html.Label(Language.GetString("DashboardHeight:"))
                    @Html.TextBoxFor(model => model.DashboardHeight, "{0:F2}", new { Class = "form-control", @style = "width:100% !important;display:inline-block;float:left;" })
                </div>
                <div class="col-xl-3">
                    @Html.Label(Language.GetString("DashboardWeight:"))
                    @Html.TextBoxFor(model => model.DashboardWeight, "{0:F2}", new { Class = "form-control", @style = "width:100% !important;display:inline-block;" })
                </div>
                <div class="col-xl-3">
                    @Html.Label(Language.GetString("XAxisTitle:"))
                    @Html.TextBoxFor(model => model.XAxisTitle, new { Class = "form-control", @style = "width:100% !important;display:inline-block;float:left;" })
                    <div id="errXAxisTitle"></div>
                </div>
                <div class="col-xl-3">
                    @Html.Label(Language.GetString("YAxisTitle:"))
                    @Html.TextBoxFor(model => model.YAxisTitle, new { Class = "form-control", @style = "width:100% !important;display:inline-block;" })
                    <div id="errYAxisTitle"></div>
                </div>
                <div class="col-xl-3 box-col">
                    @Html.Label(Language.GetString("DashboardBackGroundColor:"))
                    @(Html.Kendo().ColorPickerFor(model => model.DashboardBackGrounndColors)
                      //  .Name("DashboardBackGroundColor")
                        .Value("#ff0000")
                        .Format(ColorPickerFormat.Rgb)
                        .Formats(new string[] { "rgb", "hex" })
                        
                        )
                    @* @(Html.Kendo().ColorPalette()
                .Name("metro")
                .Palette(new string[] {
                "#ffffff", "#000000", "#d6ecff", "#4e5b6f", "#7fd13b", "#ea157a", "#feb80a", "#00addc", "#738ac8", "#1ab39f",
                "#f2f2f2", "#7f7f7f", "#a7d6ff", "#d9dde4", "#e5f5d7", "#fad0e4", "#fef0cd", "#c5f2ff", "#e2e7f4", "#c9f7f1",
                "#d8d8d8", "#595959", "#60b5ff", "#b3bcca", "#cbecb0", "#f6a1c9", "#fee29c", "#8be6ff", "#c7d0e9", "#94efe3",
                "#bfbfbf", "#3f3f3f", "#007dea", "#8d9baf", "#b2e389", "#f272af", "#fed46b", "#51d9ff", "#aab8de", "#5fe7d5",
                "#a5a5a5", "#262626", "#003e75", "#3a4453", "#5ea226", "#af0f5b", "#c58c00", "#0081a5", "#425ea9", "#138677",
                "#7f7f7f", "#0c0c0c", "#00192e", "#272d37", "#3f6c19", "#750a3d", "#835d00", "#00566e", "#2c3f71", "#0c594f"
                })
                ) *@
                </div>
               @*  <span style="color: red;">* All units are in Inches</span> *@
            </div>
            <div style="border: solid 1px #C0CAD1; margin: 5px 0px;" id="MappingFieldPart">
                <h5 style="background: #C0CAD1; margin: 0px;">Mapping Field Details</h5>
                <div class="col-md-12" style="width:100%">
                    <table class="entry" style="width:100%">
                        <tr>
                            <td class="editor-label" style="width: 10%;">
                                @Html.Label(Language.GetString("FieldName")) <span style='color: red'>* </span>
                            </td>
                            <td style="width: 23%">
                                @(Html.Kendo().DropDownList().Name("FieldName")
                                    .HtmlAttributes(new { style = "width:200px !important" })
                                    .OptionLabel(Language.GetString("Select")).DataTextField("Text")
                                    .DataValueField("Value")
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetDashboardTemplateFields", "DataService").Data("filterAppID");
                                        })
                                        .ServerFiltering(true);
                                    })
                                    .Enable(true).AutoBind(false)//.CascadeFrom("DashboardTemplateID")
                                    )
                                <div id="errFieldName"></div>
                                @Html.Hidden("ID", 0)
                            </td>
                            <td class="editor-label" style="width: 10%;display:none;" id="XaxisLabel">
                                @Html.Label(Language.GetString("XAxisField")) <span style='color: red'>* </span>
                            </td>
                            <td style="width: 23%;display:none;" id="XaxisValue">
                                @(Html.Kendo().DropDownList().Name("XAxisField")
                                    .HtmlAttributes(new { style = "width:200px !important" })
                                    .OptionLabel(Language.GetString("Select")).DataTextField("Text")
                                    .DataValueField("Value")
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetDashboardTemplateFields", "DataService").Data("filterXaxisAppID");
                                        })
                                        .ServerFiltering(true);
                                    })
                                    .Enable(true).AutoBind(false)//.CascadeFrom("DashboardTemplateID")
                                    )
                                <div id="errXFieldName"></div>
                            </td>
                            <td class="editor-label" style="width: 10%;display:none;" id="YaxisLabel">
                                @Html.Label(Language.GetString("YAxisField")) <span style='color: red'>* </span>
                            </td>
                            <td style="width: 23%;display:none;" id="YaxisValue">
                                @(Html.Kendo().DropDownList().Name("YAxisField")
                                    .HtmlAttributes(new { style = "width:200px !important" })
                                    .OptionLabel(Language.GetString("Select")).DataTextField("Text")
                                    .DataValueField("Value")
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetDashboardTemplateFields", "DataService").Data("filterYaxisAppID");
                                        })
                                        .ServerFiltering(true);
                                    })
                                    .Enable(true).AutoBind(false)//.CascadeFrom("DashboardTemplateID")
                                    )
                                <div id="errYFieldName"></div>
                            </td>
                        </tr>
                        <tr>
                            <td class="editor-label" style="width: 10%;display:none;" id="CategoryaxisLabel">
                                @Html.Label(Language.GetString("CategoriesField")) <span style='color: red'>* </span>
                            </td>
                            <td style="width: 23%;display:none;" id="CategoryaxisValue">
                                @(Html.Kendo().DropDownList().Name("CategoriesField")
                                    .HtmlAttributes(new { style = "width:200px !important" })
                                    .OptionLabel(Language.GetString("Select")).DataTextField("Text")
                                    .DataValueField("Value")
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetDashboardTemplateFields", "DataService").Data("filterCategoriesAppID");
                                        })
                                        .ServerFiltering(true);
                                    })
                                    .Enable(true).AutoBind(false)//.CascadeFrom("DashboardTemplateID")
                                    )
                                <div id="errCategoryFieldName"></div>
                            </td>
                            <td class="editor-label" style="width: 10%;display:none;" id="ColorLabel">
                                @Html.Label(Language.GetString("ColorCode"))
                            </td>
                             <td style="width: 23%;display:none;" id="ColorValue">
                                @(Html.Kendo().ColorPicker()
                                    .Name("ColorCode")
                                    .Value("#ff0000")
                                    .Format(ColorPickerFormat.Rgb)
                                    .Formats(new string[] { "rgb", "hex" })

                                    )
                                @* @(Html.Kendo().ColorPalette()
                            .Name("metro")
                            .Palette(new string[] {
                            "#ffffff", "#000000", "#d6ecff", "#4e5b6f", "#7fd13b", "#ea157a", "#feb80a", "#00addc", "#738ac8", "#1ab39f",
                            "#f2f2f2", "#7f7f7f", "#a7d6ff", "#d9dde4", "#e5f5d7", "#fad0e4", "#fef0cd", "#c5f2ff", "#e2e7f4", "#c9f7f1",
                            "#d8d8d8", "#595959", "#60b5ff", "#b3bcca", "#cbecb0", "#f6a1c9", "#fee29c", "#8be6ff", "#c7d0e9", "#94efe3",
                            "#bfbfbf", "#3f3f3f", "#007dea", "#8d9baf", "#b2e389", "#f272af", "#fed46b", "#51d9ff", "#aab8de", "#5fe7d5",
                            "#a5a5a5", "#262626", "#003e75", "#3a4453", "#5ea226", "#af0f5b", "#c58c00", "#0081a5", "#425ea9", "#138677",
                            "#7f7f7f", "#0c0c0c", "#00192e", "#272d37", "#3f6c19", "#750a3d", "#835d00", "#00566e", "#2c3f71", "#0c594f"
                            })
                            ) *@
                                 </td>
                            <td class="editor-label" style="width: 10%;display:none;" id="IconLabel">
                                @Html.Label(Language.GetString("IconPath"))
                            </td>
                            <td style="width: 23%;display:none;" id="IconValue">
                                @(
                                    Html.Kendo().Upload()
                                    .Name("fileNames")
                                    .Async(a => a
                                    .Save("IconPathUpload", "DashboardMapping", new { currentPageID = Model.CurrentPageID })
                                    .Remove("IconRemove", "DashboardMapping", new { currentPageID = Model.CurrentPageID })
                                    .AutoUpload(true)
                                    ).Multiple(false)
                                    .Events(events => events
                                    .Success("OnSuccessUpload")
                                    
                                    )
                                    .Validation(validation => validation
                                    .AllowedExtensions(".jpg", ".jpeg", ".png", ".gif")
                                    ))
                                    @Html.Hidden("IconPath")
                            </td>
                           
                        </tr>
                        <tr>
                            <td class="editor-label" style="width: 10%;display:none;" id="PageLabel">
                                @Html.Label(Language.GetString("RedirectPageName"))
                            </td>
                            <td style="width: 23%;display:none;" id="PageValue">
                                @Html.TextBox("RedirectPageName", "", new { Class = "form-control", style = "width: 100%", maxlength = 200 })
                            </td>
                        </tr>
                    </table>
                    <div class="col-xl-12 text-right add-action-btns">
                        @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Add").Name("AddButton").HtmlAttributes(new { onclick = "return onDashboardCreateform();" })
                    </div>
                    <table>

                        <tr>
                            <td colspan="4">
                                @(
                                    Html.Kendo().Grid<ACS.AMS.WebApp.Models.DashboardFieldMappingModel>()

                                    .Name("DetailsGrid")
                                    .Columns(columns =>
                                    {
                                      @*   columns.Bound(p => p.ID).Width(100).Visible(false);
                                        columns.Bound(p => p.ID).Width(20).Filterable(false); *@
                                        columns.Bound(p => p.FieldName).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("FieldName"));
                                        columns.Bound(p => p.XAxisField).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("XAxisField"));
                                        columns.Bound(p => p.YAxisField).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("YAxisField"));
                                        columns.Bound(p => p.ColorCode).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("ColorCode"));
                                        columns.Bound(p => p.IconPath).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("IconPath"));
                                        columns.Bound(p => p.RedirectPageName).Width(100).HeaderHtmlAttributes(new { @style = "font-weight:bold" }).Title(Language.GetString("RedirectPageName"));

                                        columns.Template("<center><a class='k-button-icontext' id='#=DashboardTemplateID#' href='javascript:DashboardDelete(#=DashboardTemplateID#, \"#= DashboardTypeID #\",\"#= FieldName #\")'><img src='/css/images/delete-icon.png' alt='icon' style='Width:15px;height:20px' /></a></center></text>")
                                        .Title(Language.GetString("Delete")).Width(50);

                                    }).Filterable()
                                    .Editable(editable => editable.Mode(GridEditMode.PopUp).DisplayDeleteConfirmation(false))
                                    .DataSource(datasource => datasource
                                    .Ajax()//. Model(p => p.Id(x => x.PurchaseOrderID))
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ID);
                                        model.Field(p => p.ID).Editable(false);
                                    })
                                    .Read(read => read.Action("GetItemList", "DashboardMapping", new { currentPageID = Model.CurrentPageID })))
                                    .Pageable()
                                    )
                            </td>

                        </tr>

                    </table>
                </div>
                <div class="col-xl-12 text-right add-action-btns">
                    @Html.Kendo().Button().ThemeColor(ThemeColor.Primary).Content("Save").Name("loginButton").HtmlAttributes(new { type = "submit", onclick = "return onDashboardvalidation();" })
                    @Html.Kendo().Button().ThemeColor(ThemeColor.Secondary).Content("Cancel").Name("cancelButton").HtmlAttributes(new { onclick = "loadIndexPage('DashboardMapping')" })
                </div>
            </div>

        </div>
    </div>
}



<script language="javascript" type="text/javascript">
    $(function () {
        setPageHeading("DashboardTemplateCreate");

    });
    function DashboardDelete(DashboardTemplateID, DashboardTypeID, FieldName) {
        var obj = {
            DashboardTemplateID: DashboardTemplateID,
            currentPageID: $("#CurrentPageID").val(),
            DashboardTypeID: DashboardTypeID,
            FieldName: FieldName
          
        }

        Sever_PostData("/DAshboardMapping/DeleteModelData", obj, obj, Request_SubmitItemDetails_Success, Request_SubmitItemDetails_Failure);
    }
   
    function onDashboardvalidation()
    {
        var fag = true;
        if (!$("#DashboardTypeID").val()) {
            fag = false;
            if ($("#validateTypeID").val() != "") {
                $("#errDashboardTypeID").after('<span style="color:red;font-weight:normal;" id="validateTypeID">Dashboard Type is Required</span>');
            }
        }
        else {
            $("#validateTypeID").remove();
        }
        if (!$('#DashboardTemplateID').data("kendoMultiColumnComboBox").value()) {
            fag = false;
            if ($("#validateTemplateID").val() != "") {
                $("#errDashboardTemplateID").after('<span style="color:red;font-weight:normal;" id="validateTemplateID">Dashboard Template is Required</span>');
            }
        }
        else {
            $("#validateTemplateID").remove();
        }
        var type = $("#DashboardTypeID").data("kendoDropDownList").text();
        if (type.endsWith("Chart")) {
            if (!$("#XAxisTitle").val()) {
                fag = false;
                if ($("#validateXaxis").val() != "") {
                    $("#errXAxisTitle").after('<span style="color:red;font-weight:normal;" id="validateXaxis">X Axis Title is Required</span>');
                }
            }
            else {
                $("#validateXaxis").remove();
            }
            if (!$("#YAxisTitle").val()) {
                fag = false;
                if ($("#validateYaxis").val() != "") {
                    $("#errYAxisTitle").after('<span style="color:red;font-weight:normal;" id="validateYaxis">Y Axis Title is Required</span>');
                }
            }
            else {
                $("#validateYaxis").remove();
            }
        }
        if (!$("#DasboardMappingName").val()) {
            fag = false;
            if ($("#validateName").val() != "") {
                $("#errDasboardMappingName").after('<span style="color:red;font-weight:normal;" id="validateName">Dashboard Mapping Name is Required</span>');
            }
        }
        else {
            $("#validateName").remove();
        }
        var grid = $("#DetailsGrid").data('kendoGrid').dataSource;
        var GridLength = grid.total();
        if (GridLength == 0) {
            alert("Atleast one Mapping detail required to save the record. ");
            fag = false;
        }
        if (fag) {
            return true;
        }
        else {
            return false;
        }
        
    }
    function onDashboardCreateform() {
    
        var fag = true;
        if (!$("#FieldName").val()) {
            fag = false;
            if ($("#validateFieldName").val() != "") {
                $("#errFieldName").after('<span style="color:red;font-weight:normal;" id="validateFieldName">Field Name is Required</span>');
            }
        }
        else {
            $("#validateFieldName").remove();
        }
        if (parseInt($("#DashboardTypeID").val()) > 1) {
            if (!$("#XAxisField").val()) {
                fag = false;
                if ($("#validateXFieldName").val() != "") {
                    $("#errXFieldName").after('<span style="color:red;font-weight:normal;" id="validateXFieldName">Xaxis Field Name is Required</span>');
                }
            }
            else {
                $("#validateXFieldName").remove();
            }
            if (!$("#YAxisField").val()) {
                fag = false;
                if ($("#validateYFieldName").val() != "") {
                    $("#errYFieldName").after('<span style="color:red;font-weight:normal;" id="validateYFieldName">Yaxis Field Name is Required</span>');
                }
            }
            else {
                $("#validateYFieldName").remove();
            }
            if ($("#XAxisField").val() == $("#YAxisField").val()) { 
                fag = false;
                if ($("#validateYFieldName").val() != "") {
                    $("#errYFieldName").after('<span style="color:red;font-weight:normal;" id="validateYFieldName">Yaxis Field Name  and X Axis Field Name are the Same</span>');
                }
            }
            else {
                $("#validateYFieldName").remove();
            }

            if ((parseInt($("#DashboardTypeID").val()) == 4) || (parseInt($("#DashboardTypeID").val()) == 5 )) {
                if (!$("#CategoriesField").val()) {
                    fag = false;
                    if ($("#validatecategoryFieldName").val() != "") {
                        $("#errCategoryFieldName").after('<span style="color:red;font-weight:normal;" id="validatecategoryFieldName">Category Field Name is Required</span>');
                    }
                }
                else {
                    $("#validatecategoryFieldName").remove();
                }

                if ($("#XAxisField").val() == $("#YAxisField").val() == $("#CategoriesField").val()) {
                    fag = false;
                    if ($("#validateYFieldName").val() != "") {
                        $("#errYFieldName").after('<span style="color:red;font-weight:normal;" id="validateYFieldName">Yaxis Field Name  and X Axis Field Name and Category Field are the Same</span>');
                    }
                }
                else {
                    $("#validateYFieldName").remove();
                }
            }

        }
        var type = $("#DashboardTypeID").data("kendoDropDownList").text();
        if ((type.endsWith("Chart")) || (type.indexOf("Chart") != -1)) {
            var grid = $("#DetailsGrid").data('kendoGrid').dataSource;
            var GridLength = grid.total();
            if (GridLength == 1) {
                alert("Chart X axis and Y axis Mapped ! duplicate record not allowed. ");
                fag = false;
            }
        }
        if (fag) {
            debugger;
            //var obj = $("#form0").serialize();
            var obj = {
                id: $("#LineItemIdentityID").val(),
                FieldName: $("#FieldName").data("kendoDropDownList").text(),
                DashboardTemplateID: $("#DashboardTemplateID").val(),
                DashboardTypeID:$("#DashboardTypeID").val(),
                DashboardTemplateFieldID :$("#FieldName").val(),
                DisplayTitle: $("#FieldName").data("kendoDropDownList").text(),
                XAxisField: $("#XAxisField").data("kendoDropDownList").text() == "Select" ? "" : $("#XAxisField").data("kendoDropDownList").text(),
                YAxisField: $("#YAxisField").data("kendoDropDownList").text() == "Select" ? "" : $("#YAxisField").data("kendoDropDownList").text(),
                CategoriesField: $("#CategoriesField").data("kendoDropDownList").text() == "Select" ? "" : $("#CategoriesField").data("kendoDropDownList").text(),
                currentPageID: $("#CurrentPageID").val(),
                IconPath: $("#IconPath").val(),
                RedirectPageName: $("#RedirectPageName").val(),
                ColorCode: "#00192e" //$("#ColorCode").data("kendoColorPicker").value(),
            }

            Sever_PostData("/DashboardMapping/AddLineItems", obj, Request_SubmitItemDetails_Success, Request_SubmitItemDetails_Failure);
        }

    }
    function Sever_PostData(url, data, successCallBack, failureCallBack) {
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            success: function (responce) {
                if (successCallBack != null) successCallBack(responce);
            },
            failure: function (responce) {
                if (failureCallBack != null)
                    failureCallBack(responce);
                else
                    alert(response.responseText);
            },
            error: function (responce) {
                if (failureCallBack != null)
                    failureCallBack(responce);
                else
                    alert(response.responseText);
            }
        });
    }
    function Request_SubmitItemDetails_Failure(data) {
        setInitialFocus("FieldName");
    }
    function Request_SubmitItemDetails_Success(data) {
        if (data != '') {
        }
        else {
            $("#FieldName").data("kendoDropDownList").text('');
            $("#FieldName").data("kendoDropDownList").value('');
            $("#XAxisField").data("kendoDropDownList").text('');
            $("#XAxisField").data("kendoDropDownList").value('');
            $("#YAxisField").data("kendoDropDownList").text('');
            $("#YAxisField").data("kendoDropDownList").text('');
            $("#CategoriesField").data("kendoDropDownList").value('');
            $("#IconPath").val("");
            $("#RedirectPageName").val("");
            //$("#ColorCode").data("kendoColorPicker").value('');
            $("#ID").val('');
           
        }

        setInitialFocus("CategoryName");
        $("#DetailsGrid").data('kendoGrid').dataSource.read();
    }
</script>
<script src="~/acsscript/reportscripts.js"></script>