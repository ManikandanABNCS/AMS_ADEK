// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ACS.AMS.DAL.DBModel;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ACS.AMS.DAL.DBContext
{
    public partial class AMSContext
    {
        private IAMSContextProcedures _procedures;

        public virtual IAMSContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AMSContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAMSContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Prc_AssetCreationValidationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_AssetModificationValidationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_AssetRetirementForApprovalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_AssetRetirementValidationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_AssetTransferForApprovalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_AssetTransferValidationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_DepreciationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_DepreciationApprovalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_ExportToCategoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_ExportToLocationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_GetAssetDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_GetPeriodWithDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_GetSecondLevelLocationValueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_ImportTemplateUserAgainstListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_ValidateUserWiseTransactionsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AMSContextProcedures : IAMSContextProcedures
    {
        private readonly AMSContext _context;

        public AMSContextProcedures(AMSContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Prc_AssetCreationValidationResult>> Prc_AssetCreationValidationAsync(int? UserID, string CategoryCode, string LocationCode, int? CategoryID, int? LocationID, int? DepartmentID, string DepartmentCode, string SerialNo, string ManufacturerCode, int? ManufacturerID, string DataProcessedBy, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMsg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMsg = new SqlParameter
            {
                ParameterName = "ErrorMsg",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMsg?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryCode",
                    Size = -1,
                    Value = CategoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationCode",
                    Size = -1,
                    Value = LocationCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCode",
                    Size = -1,
                    Value = DepartmentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SerialNo",
                    Size = -1,
                    Value = SerialNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManufacturerCode",
                    Size = -1,
                    Value = ManufacturerCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManufacturerID",
                    Value = ManufacturerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataProcessedBy",
                    Size = 100,
                    Value = DataProcessedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMsg,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_AssetCreationValidationResult>("EXEC @returnValue = [dbo].[Prc_AssetCreationValidation] @UserID, @CategoryCode, @LocationCode, @CategoryID, @LocationID, @DepartmentID, @DepartmentCode, @SerialNo, @ManufacturerCode, @ManufacturerID, @DataProcessedBy, @ErrorID OUTPUT, @ErrorMsg OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMsg.SetValue(parameterErrorMsg.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_AssetModificationValidationResult>> Prc_AssetModificationValidationAsync(int? UserID, int? AssetID, string CategoryCode, string LocationCode, int? CategoryID, int? LocationID, int? DepartmentID, string DepartmentCode, string SerialNo, string ManufacturerCode, int? ManufacturerID, string DataProcessedBy, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMsg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMsg = new SqlParameter
            {
                ParameterName = "ErrorMsg",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMsg?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AssetID",
                    Value = AssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryCode",
                    Size = -1,
                    Value = CategoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationCode",
                    Size = -1,
                    Value = LocationCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCode",
                    Size = -1,
                    Value = DepartmentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SerialNo",
                    Size = -1,
                    Value = SerialNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManufacturerCode",
                    Size = -1,
                    Value = ManufacturerCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManufacturerID",
                    Value = ManufacturerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataProcessedBy",
                    Size = 100,
                    Value = DataProcessedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMsg,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_AssetModificationValidationResult>("EXEC @returnValue = [dbo].[Prc_AssetModificationValidation] @UserID, @AssetID, @CategoryCode, @LocationCode, @CategoryID, @LocationID, @DepartmentID, @DepartmentCode, @SerialNo, @ManufacturerCode, @ManufacturerID, @DataProcessedBy, @ErrorID OUTPUT, @ErrorMsg OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMsg.SetValue(parameterErrorMsg.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_AssetRetirementForApprovalResult>> prc_AssetRetirementForApprovalAsync(int? UserID, int? ApprovalID, int? CompanyID, int? LanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovalID",
                    Value = ApprovalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_AssetRetirementForApprovalResult>("EXEC @returnValue = [dbo].[prc_AssetRetirementForApproval] @UserID, @ApprovalID, @CompanyID, @LanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_AssetRetirementValidationResult>> Prc_AssetRetirementValidationAsync(int? UserID, int? AssetID, string DataProcessedBy, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMsg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMsg = new SqlParameter
            {
                ParameterName = "ErrorMsg",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMsg?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AssetID",
                    Value = AssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataProcessedBy",
                    Size = 100,
                    Value = DataProcessedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMsg,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_AssetRetirementValidationResult>("EXEC @returnValue = [dbo].[Prc_AssetRetirementValidation] @UserID, @AssetID, @DataProcessedBy, @ErrorID OUTPUT, @ErrorMsg OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMsg.SetValue(parameterErrorMsg.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_AssetTransferForApprovalResult>> prc_AssetTransferForApprovalAsync(int? UserID, int? ApprovalID, int? CompanyID, int? LanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovalID",
                    Value = ApprovalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_AssetTransferForApprovalResult>("EXEC @returnValue = [dbo].[prc_AssetTransferForApproval] @UserID, @ApprovalID, @CompanyID, @LanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_AssetTransferValidationResult>> Prc_AssetTransferValidationAsync(int? UserID, int? AssetID, string LocationCode, int? LocationID, int? DepartmentID, string DepartmentCode, string DataProcessedBy, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMsg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMsg = new SqlParameter
            {
                ParameterName = "ErrorMsg",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMsg?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AssetID",
                    Value = AssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationCode",
                    Size = -1,
                    Value = LocationCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCode",
                    Size = -1,
                    Value = DepartmentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataProcessedBy",
                    Size = 100,
                    Value = DataProcessedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMsg,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_AssetTransferValidationResult>("EXEC @returnValue = [dbo].[Prc_AssetTransferValidation] @UserID, @AssetID, @LocationCode, @LocationID, @DepartmentID, @DepartmentCode, @DataProcessedBy, @ErrorID OUTPUT, @ErrorMsg OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMsg.SetValue(parameterErrorMsg.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_DepreciationResult>> prc_DepreciationAsync(int? PeriodID, int? UserID, int? CompanyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PeriodID",
                    Value = PeriodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_DepreciationResult>("EXEC @returnValue = [dbo].[prc_Depreciation] @PeriodID, @UserID, @CompanyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_DepreciationApprovalResult>> prc_DepreciationApprovalAsync(int? userID, int? CompanyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_DepreciationApprovalResult>("EXEC @returnValue = [dbo].[prc_DepreciationApproval] @userID, @CompanyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_ExportToCategoryResult>> prc_ExportToCategoryAsync(int? UserID, string FilterData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FilterData",
                    Size = -1,
                    Value = FilterData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_ExportToCategoryResult>("EXEC @returnValue = [dbo].[prc_ExportToCategory] @UserID, @FilterData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_ExportToLocationResult>> prc_ExportToLocationAsync(int? UserID, string FilterData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FilterData",
                    Size = -1,
                    Value = FilterData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_ExportToLocationResult>("EXEC @returnValue = [dbo].[prc_ExportToLocation] @UserID, @FilterData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_GetAssetDetailsResult>> prc_GetAssetDetailsAsync(int? LocationID, int? CategoryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_GetAssetDetailsResult>("EXEC @returnValue = [dbo].[prc_GetAssetDetails] @LocationID, @CategoryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_GetPeriodWithDateResult>> prc_GetPeriodWithDateAsync(int? CompanyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_GetPeriodWithDateResult>("EXEC @returnValue = [dbo].[prc_GetPeriodWithDate] @CompanyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_GetSecondLevelLocationValueResult>> prc_GetSecondLevelLocationValueAsync(int? LocationID, string AssetIDS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AssetIDS",
                    Size = -1,
                    Value = AssetIDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_GetSecondLevelLocationValueResult>("EXEC @returnValue = [dbo].[prc_GetSecondLevelLocationValue] @LocationID, @AssetIDS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_ImportTemplateUserAgainstListResult>> prc_ImportTemplateUserAgainstListAsync(int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_ImportTemplateUserAgainstListResult>("EXEC @returnValue = [dbo].[prc_ImportTemplateUserAgainstList] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ValidateAssetAdditionAsync(int? LocationID, int? CategoryID, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterErrorID,
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ValidateAssetAddition] @LocationID, @CategoryID, @ErrorID OUTPUT, @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMessage.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ValidateBulkAssetAdditionAsync(string LocationCode, string CategoryCode, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationCode",
                    Size = -1,
                    Value = LocationCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryCode",
                    Size = -1,
                    Value = CategoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ValidateBulkAssetAddition] @LocationCode, @CategoryCode, @ErrorID OUTPUT, @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMessage.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ValidateBulkExcelRetirementAsync(string Barcode, int? UserID, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Barcode",
                    Size = -1,
                    Value = Barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterErrorID,
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ValidateBulkExcelRetirement] @Barcode, @UserID, @ErrorID OUTPUT, @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMessage.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> prc_ValidateForTransactionAsync(string FromAssetID, int? ToLocationID, int? ModuleID, string RightName, OutputParameter<int?> ErrorID, OutputParameter<string> ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorID = new SqlParameter
            {
                ParameterName = "ErrorID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromAssetID",
                    Size = -1,
                    Value = FromAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToLocationID",
                    Value = ToLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleID",
                    Value = ModuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RightName",
                    Size = 200,
                    Value = RightName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterErrorID,
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[prc_ValidateForTransaction] @FromAssetID, @ToLocationID, @ModuleID, @RightName, @ErrorID OUTPUT, @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            ErrorID.SetValue(parameterErrorID.Value);
            ErrorMessage.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_ValidateUserWiseTransactionsResult>> Prc_ValidateUserWiseTransactionsAsync(int? UserID, int? ModuleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleID",
                    Value = ModuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_ValidateUserWiseTransactionsResult>("EXEC @returnValue = [dbo].[Prc_ValidateUserWiseTransactions] @UserID, @ModuleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
