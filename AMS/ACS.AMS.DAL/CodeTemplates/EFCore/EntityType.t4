<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    // Template version: 703 - please do NOT remove this line
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var primaryKeyName = "";
    Type primaryKeyType = typeof(int);
    bool statusIDFound = false;
    
    bool divisionIDFound = false;
    bool departmentIDFound = false;

    bool postingStatusIDPropertyFound = false;

    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic",
    };

    usings.Add(NamespaceHint.Substring(0, NamespaceHint.Length - 5) + "Context");

    if (Options.UseDataAnnotations)
    {
        usings.Add("System.ComponentModel");
        usings.Add("System.ComponentModel.DataAnnotations");
        usings.Add("System.ComponentModel.DataAnnotations.Schema");
        usings.Add("Microsoft.EntityFrameworkCore");
    }

    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= NamespaceHint #>;

<#
    }

    if (!string.IsNullOrEmpty(EntityType.GetComment()))
    {
#>
/// <summary>
/// <#= code.XmlComment(EntityType.GetComment()) #>
/// </summary>
<#
    }

    if (Options.UseDataAnnotations)
    {
        foreach (var dataAnnotation in EntityType.GetDataAnnotations(annotationCodeGenerator))
        {
#>
<#= code.Fragment(dataAnnotation) #>
<#
        }
    }
#>
public partial class <#= EntityType.Name #> : BaseEntityObject, IACSDBObject
{
<#
    var firstProperty = true;
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        if(string.Compare("StatusID", property.Name, true) == 0)
        {
            statusIDFound = true;
        }
        if(string.Compare("DivisionID", property.Name, true) == 0)
        {
            divisionIDFound = true;
        }
        if(string.Compare("DepartmentID", property.Name, true) == 0)
        {
            departmentIDFound = true;
        }

        if (!firstProperty)
        {
            WriteLine("");
        }
        else
        {
            //Use first field as primary key field and its type
            primaryKeyName = property.Name;
            primaryKeyType = property.ClrType;
        }

        if (!string.IsNullOrEmpty(property.GetComment()))
        {
#>
    /// <summary>
    /// <#= code.XmlComment(property.GetComment(), indent: 1) #>
    /// </summary>
<#
        }

        if (Options.UseDataAnnotations)
        {
            var dataAnnotations = property.GetDataAnnotations(annotationCodeGenerator)
                .Where(a => !(a.Type == typeof(RequiredAttribute) && Options.UseNullableReferenceTypes && !property.ClrType.IsValueType));
            foreach (var dataAnnotation in dataAnnotations)
            {
                Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment codeFragment = null;
                if(dataAnnotations.Count() > 0)
                {
                    codeFragment = dataAnnotations.FirstOrDefault() as Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment;

                    if(codeFragment.Type == typeof(System.ComponentModel.DataAnnotations.KeyAttribute))
                    {
                        primaryKeyName = property.Name;
                        primaryKeyType = property.ClrType;
                    }
                }
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        usings.AddRange(code.GetRequiredUsings(property.ClrType));

        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        var needsInitializer = Options.UseNullableReferenceTypes && !property.IsNullable && !property.ClrType.IsValueType;
        if(string.Compare("StatusID", property.Name, true) == 0)
        {
#>
    [DisplayName("Status")]
<#
        }
#>
    public <#= code.Reference(property.ClrType) #><#= needsNullable ? "?" : "" #> <#= property.Name #> { get; set; }<#= needsInitializer ? " = null!;" : "" #>
<#
        firstProperty = false;
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in navigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        var targetType = navigation.TargetEntityType.Name;
        if (navigation.IsCollection)
        {
#>
    public virtual ICollection<<#= targetType #>> <#= navigation.Name #> { get; set; } = new List<<#= targetType #>>();
<#
        }
        else
        {
            var needsNullable = Options.UseNullableReferenceTypes && !(navigation.ForeignKey.IsRequired && navigation.IsOnDependent);
            var needsInitializer = Options.UseNullableReferenceTypes && navigation.ForeignKey.IsRequired && navigation.IsOnDependent;

            needsNullable = true;
#>
    public virtual <#= targetType #><#= needsNullable ? "?" : "" #> <#= navigation.Name #> { get; set; }<#= needsInitializer ? " = null!;" : "" #>
<#
        }
    }

    foreach (var skipNavigation in EntityType.GetSkipNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in skipNavigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }
#>
    public virtual ICollection<<#= skipNavigation.TargetEntityType.Name #>> <#= skipNavigation.Name #> { get; set; } = new List<<#= skipNavigation.TargetEntityType.Name #>>();
<#
    
    }
#>

/*
	#region Constructors

    //[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
    public <#= EntityType.Name #>()
    {

    }

	/// <summary>
    /// Default constructor for <#= EntityType.Name #>
    /// </summary>
    /// <param name="db"></param>
	public <#= EntityType.Name #>(<#= Options.ContextName #> _db)
	{
<#
		if(postingStatusIDPropertyFound)
		{
#>
		this.PostingStatusID = (byte)PostingStatusValue.WorkInProgress;
<#
		}
#>
<#
		if(statusIDFound)
		{
#>
		this.StatusID = (byte) StatusValue.Active;
<#
		}
#>		
		InitializeProperties();

		_db.Add(this);
	}

	#endregion Constructors
*/

    #region Instance methods

	public override string GetPrimaryKeyFieldName()
	{
		return "<#= primaryKeyName #>";
	}

	public override object GetPrimaryKeyValue()
	{
		return <#= primaryKeyName #>;
	}

	internal override void BeforeSave(<#= Options.ContextName #> db)
    {
<#
		foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
		{
			if(property.ClrType == typeof(string) )
			{
#>
		if(!string.IsNullOrEmpty(this.<#=property.Name#>)) this.<#=property.Name#> = this.<#=property.Name#>.Trim();
<#
			}
		}
#>

		OnBeforeSave(db);

        base.BeforeSave(db);
    }

	public void Delete()
	{
<#
		if(statusIDFound)
		{
#>
		this.StatusID = (int) StatusValue.Deleted;
<#
		}
#>
		OnDelete();
	}

	#endregion Instance methods

    #region Static Methods

    public static <#= EntityType.Name #> GetItem(<#= Options.ContextName #> _db, <#= code.Reference(primaryKeyType) #> id)
    {
        return (from b in _db.<#= EntityType.Name #>
                where b.<#= primaryKeyName #> == id
                select b).FirstOrDefault();
    }

<# if(divisionIDFound) { #>
    public static IQueryable<<#= EntityType.Name #>> GetAllItemsByDivision(<#= Options.ContextName #> _db, int divisionID <# if(statusIDFound) { #>, bool includeInactiveItems = false <# } #>)
    {
        return from b in GetAllItems(_db<# if(statusIDFound) { #>, includeInactiveItems <# } #>)
                where b.DivisionID == divisionID
                select b;
    }

<# } #>
<# if(departmentIDFound) { #>
    public static IQueryable<<#= EntityType.Name #>> GetAllItemsByDepartment(<#= Options.ContextName #> _db, int departmentID <# if(statusIDFound) { #>, bool includeInactiveItems = false <# } #>)
    {
        return from b in GetAllItems(_db<# if(statusIDFound) { #>, includeInactiveItems<# } #>)
                where b.DepartmentID == departmentID
                select b;
    }

<# } #>
    public static IQueryable<<#= EntityType.Name #>> GetAllItems(<#= Options.ContextName #> _db , bool includeInactiveItems = false )
    {
<# if(statusIDFound) { #>
        if(includeInactiveItems)
        {
            return (from b in _db.<#= EntityType.Name #>
                    where b.StatusID != (int) StatusValue.Deleted 
                    orderby b.<#= primaryKeyName #> descending
                    select b);
        }
        else
        {
            return (from b in _db.<#= EntityType.Name #>
                    where b.StatusID != (int) StatusValue.Deleted 
                           && b.StatusID != (int) StatusValue.Inactive
                    orderby b.<#= primaryKeyName #> descending
                    select b);
        }
<# } else { #>
        return (from b in _db.<#= EntityType.Name #> select b);
<# } #>
    }

    public static IQueryable<<#= EntityType.Name #>> GetAllUserItems(<#= Options.ContextName #> _db, int userID, bool includeInactiveItems = false)
    {
<# if(divisionIDFound || departmentIDFound) { #>
        return from b in <#= EntityType.Name #>.GetAllItems(_db, includeInactiveItems)
                
                select b;
<# } else { #>
        return <#= EntityType.Name #>.GetAllItems(_db, includeInactiveItems);
<# } #>
    }

    public static bool DeleteItem(<#= Options.ContextName #> _db, <#= code.Reference(primaryKeyType) #> id)
    {
        var item = GetItem(_db, id);
        if (item != null)
        {
            item.Delete();
    		return true;
        }
    
    	return false;
    }
    
    #endregion Static Methods

    #region Partial Methods
	
	partial void InitializeProperties();
	partial void OnBeforeSave(<#= Options.ContextName #> db);
	partial void OnDelete();

	#endregion Partial Methods

    protected override IQueryable GetAllItemsQuery(<#= Options.ContextName #> _db)
    {
        return (from b in _db.<#= EntityType.Name #> select b);
    }

    #region Interface Methods

    IQueryable<BaseEntityObject> IACSDBObject.GetAllItems(<#= Options.ContextName #> _db, bool includeInactiveItems = true)
    {
        return <#= EntityType.Name #>.GetAllItems(_db, includeInactiveItems);
    }

    IQueryable<BaseEntityObject> IACSDBObject.GetAllUserItems(<#= Options.ContextName #> _db, int userID, bool includeInactiveItems = true)
    {
        return <#= EntityType.Name #>.GetAllUserItems(_db, userID, includeInactiveItems);
    }

    BaseEntityObject IACSDBObject.GetItemByID(<#= Options.ContextName #> _db, long itemID)
    {
        return GetItem(_db, (<#= code.Reference(primaryKeyType) #>) itemID);
    }

    bool IACSDBObject.DeleteObject()
    {
        this.Delete();

        return true;
    }

    #endregion Interface Methods
}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
using <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
